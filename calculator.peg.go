package main

// Code generated by peg calculator.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulevalue
	rulematrix
	ruleimaginary
	rulenumber
	ruleexp1
	ruleexp2
	rulepi
	ruleprec
	rulelog
	rulesqrt
	rulecos
	rulesin
	ruletan
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulerow
	rulePegText
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"value",
	"matrix",
	"imaginary",
	"number",
	"exp1",
	"exp2",
	"pi",
	"prec",
	"log",
	"sqrt",
	"cos",
	"sin",
	"tan",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"row",
	"PegText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Calculator struct {
	Buffer string
	buffer []rune
	rules  [31]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Calculator) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Calculator) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Calculator
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Calculator) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Calculator) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Calculator) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Calculator) error {
	return func(p *Calculator) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Calculator) error {
	return func(p *Calculator) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Calculator) Init(options ...func(*Calculator) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp e1 !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				if !_rules[rulee1]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add e2) / (minus e2))*)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[rulee2]() {
					goto l3
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position7, tokenIndex7 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l8
						}
						if !_rules[rulee2]() {
							goto l8
						}
						goto l7
					l8:
						position, tokenIndex = position7, tokenIndex7
						if !_rules[ruleminus]() {
							goto l6
						}
						if !_rules[rulee2]() {
							goto l6
						}
					}
				l7:
					goto l5
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(rulee1, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 e2 <- <(e3 ((multiply e3) / (divide e3) / (modulus e3))*)> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				if !_rules[rulee3]() {
					goto l9
				}
			l11:
				{
					position12, tokenIndex12 := position, tokenIndex
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulemultiply]() {
							goto l14
						}
						if !_rules[rulee3]() {
							goto l14
						}
						goto l13
					l14:
						position, tokenIndex = position13, tokenIndex13
						if !_rules[ruledivide]() {
							goto l15
						}
						if !_rules[rulee3]() {
							goto l15
						}
						goto l13
					l15:
						position, tokenIndex = position13, tokenIndex13
						if !_rules[rulemodulus]() {
							goto l12
						}
						if !_rules[rulee3]() {
							goto l12
						}
					}
				l13:
					goto l11
				l12:
					position, tokenIndex = position12, tokenIndex12
				}
				add(rulee2, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 3 e3 <- <(e4 (exponentiation e4)*)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				if !_rules[rulee4]() {
					goto l16
				}
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[ruleexponentiation]() {
						goto l19
					}
					if !_rules[rulee4]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
				add(rulee3, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 4 e4 <- <((minus value) / value)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l23
					}
					if !_rules[rulevalue]() {
						goto l23
					}
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					if !_rules[rulevalue]() {
						goto l20
					}
				}
			l22:
				add(rulee4, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 5 value <- <(matrix / imaginary / number / exp1 / exp2 / pi / prec / log / sqrt / cos / sin / tan / sub)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[rulematrix]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleimaginary]() {
						goto l28
					}
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulenumber]() {
						goto l29
					}
					goto l26
				l29:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleexp1]() {
						goto l30
					}
					goto l26
				l30:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleexp2]() {
						goto l31
					}
					goto l26
				l31:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulepi]() {
						goto l32
					}
					goto l26
				l32:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleprec]() {
						goto l33
					}
					goto l26
				l33:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulelog]() {
						goto l34
					}
					goto l26
				l34:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesqrt]() {
						goto l35
					}
					goto l26
				l35:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulecos]() {
						goto l36
					}
					goto l26
				l36:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesin]() {
						goto l37
					}
					goto l26
				l37:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruletan]() {
						goto l38
					}
					goto l26
				l38:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesub]() {
						goto l24
					}
				}
			l26:
				add(rulevalue, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 6 matrix <- <('[' sp (e1 / row)+ ']' sp)> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				if buffer[position] != rune('[') {
					goto l39
				}
				position++
				if !_rules[rulesp]() {
					goto l39
				}
				{
					position43, tokenIndex43 := position, tokenIndex
					if !_rules[rulee1]() {
						goto l44
					}
					goto l43
				l44:
					position, tokenIndex = position43, tokenIndex43
					if !_rules[rulerow]() {
						goto l39
					}
				}
			l43:
			l41:
				{
					position42, tokenIndex42 := position, tokenIndex
					{
						position45, tokenIndex45 := position, tokenIndex
						if !_rules[rulee1]() {
							goto l46
						}
						goto l45
					l46:
						position, tokenIndex = position45, tokenIndex45
						if !_rules[rulerow]() {
							goto l42
						}
					}
				l45:
					goto l41
				l42:
					position, tokenIndex = position42, tokenIndex42
				}
				if buffer[position] != rune(']') {
					goto l39
				}
				position++
				if !_rules[rulesp]() {
					goto l39
				}
				add(rulematrix, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 7 imaginary <- <(<('-'? [0-9]+ ('.' [0-9]*)?)> 'i' sp)> */
		func() bool {
			position47, tokenIndex47 := position, tokenIndex
			{
				position48 := position
				{
					position49 := position
					{
						position50, tokenIndex50 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l50
						}
						position++
						goto l51
					l50:
						position, tokenIndex = position50, tokenIndex50
					}
				l51:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l47
					}
					position++
				l52:
					{
						position53, tokenIndex53 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l53
						}
						position++
						goto l52
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
					{
						position54, tokenIndex54 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l54
						}
						position++
					l56:
						{
							position57, tokenIndex57 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l57
							}
							position++
							goto l56
						l57:
							position, tokenIndex = position57, tokenIndex57
						}
						goto l55
					l54:
						position, tokenIndex = position54, tokenIndex54
					}
				l55:
					add(rulePegText, position49)
				}
				if buffer[position] != rune('i') {
					goto l47
				}
				position++
				if !_rules[rulesp]() {
					goto l47
				}
				add(ruleimaginary, position48)
			}
			return true
		l47:
			position, tokenIndex = position47, tokenIndex47
			return false
		},
		/* 8 number <- <(<('-'? [0-9]+ ('.' [0-9]*)?)> sp)> */
		func() bool {
			position58, tokenIndex58 := position, tokenIndex
			{
				position59 := position
				{
					position60 := position
					{
						position61, tokenIndex61 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l61
						}
						position++
						goto l62
					l61:
						position, tokenIndex = position61, tokenIndex61
					}
				l62:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l58
					}
					position++
				l63:
					{
						position64, tokenIndex64 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l64
						}
						position++
						goto l63
					l64:
						position, tokenIndex = position64, tokenIndex64
					}
					{
						position65, tokenIndex65 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l65
						}
						position++
					l67:
						{
							position68, tokenIndex68 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l68
							}
							position++
							goto l67
						l68:
							position, tokenIndex = position68, tokenIndex68
						}
						goto l66
					l65:
						position, tokenIndex = position65, tokenIndex65
					}
				l66:
					add(rulePegText, position60)
				}
				if !_rules[rulesp]() {
					goto l58
				}
				add(rulenumber, position59)
			}
			return true
		l58:
			position, tokenIndex = position58, tokenIndex58
			return false
		},
		/* 9 exp1 <- <('e' 'x' 'p' open e1 close)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if buffer[position] != rune('e') {
					goto l69
				}
				position++
				if buffer[position] != rune('x') {
					goto l69
				}
				position++
				if buffer[position] != rune('p') {
					goto l69
				}
				position++
				if !_rules[ruleopen]() {
					goto l69
				}
				if !_rules[rulee1]() {
					goto l69
				}
				if !_rules[ruleclose]() {
					goto l69
				}
				add(ruleexp1, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 10 exp2 <- <('e' '^' value)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if buffer[position] != rune('e') {
					goto l71
				}
				position++
				if buffer[position] != rune('^') {
					goto l71
				}
				position++
				if !_rules[rulevalue]() {
					goto l71
				}
				add(ruleexp2, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 11 pi <- <('p' 'i' sp)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if buffer[position] != rune('p') {
					goto l73
				}
				position++
				if buffer[position] != rune('i') {
					goto l73
				}
				position++
				if !_rules[rulesp]() {
					goto l73
				}
				add(rulepi, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 12 prec <- <('p' 'r' 'e' 'c' open e1 close)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if buffer[position] != rune('p') {
					goto l75
				}
				position++
				if buffer[position] != rune('r') {
					goto l75
				}
				position++
				if buffer[position] != rune('e') {
					goto l75
				}
				position++
				if buffer[position] != rune('c') {
					goto l75
				}
				position++
				if !_rules[ruleopen]() {
					goto l75
				}
				if !_rules[rulee1]() {
					goto l75
				}
				if !_rules[ruleclose]() {
					goto l75
				}
				add(ruleprec, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 13 log <- <('l' 'o' 'g' open e1 close)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('l') {
					goto l77
				}
				position++
				if buffer[position] != rune('o') {
					goto l77
				}
				position++
				if buffer[position] != rune('g') {
					goto l77
				}
				position++
				if !_rules[ruleopen]() {
					goto l77
				}
				if !_rules[rulee1]() {
					goto l77
				}
				if !_rules[ruleclose]() {
					goto l77
				}
				add(rulelog, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 14 sqrt <- <('s' 'q' 'r' 't' open e1 close)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if buffer[position] != rune('s') {
					goto l79
				}
				position++
				if buffer[position] != rune('q') {
					goto l79
				}
				position++
				if buffer[position] != rune('r') {
					goto l79
				}
				position++
				if buffer[position] != rune('t') {
					goto l79
				}
				position++
				if !_rules[ruleopen]() {
					goto l79
				}
				if !_rules[rulee1]() {
					goto l79
				}
				if !_rules[ruleclose]() {
					goto l79
				}
				add(rulesqrt, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 15 cos <- <('c' 'o' 's' open e1 close)> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				if buffer[position] != rune('c') {
					goto l81
				}
				position++
				if buffer[position] != rune('o') {
					goto l81
				}
				position++
				if buffer[position] != rune('s') {
					goto l81
				}
				position++
				if !_rules[ruleopen]() {
					goto l81
				}
				if !_rules[rulee1]() {
					goto l81
				}
				if !_rules[ruleclose]() {
					goto l81
				}
				add(rulecos, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 16 sin <- <('s' 'i' 'n' open e1 close)> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				if buffer[position] != rune('s') {
					goto l83
				}
				position++
				if buffer[position] != rune('i') {
					goto l83
				}
				position++
				if buffer[position] != rune('n') {
					goto l83
				}
				position++
				if !_rules[ruleopen]() {
					goto l83
				}
				if !_rules[rulee1]() {
					goto l83
				}
				if !_rules[ruleclose]() {
					goto l83
				}
				add(rulesin, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 17 tan <- <('t' 'a' 'n' open e1 close)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				if buffer[position] != rune('t') {
					goto l85
				}
				position++
				if buffer[position] != rune('a') {
					goto l85
				}
				position++
				if buffer[position] != rune('n') {
					goto l85
				}
				position++
				if !_rules[ruleopen]() {
					goto l85
				}
				if !_rules[rulee1]() {
					goto l85
				}
				if !_rules[ruleclose]() {
					goto l85
				}
				add(ruletan, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 18 sub <- <(open e1 close)> */
		func() bool {
			position87, tokenIndex87 := position, tokenIndex
			{
				position88 := position
				if !_rules[ruleopen]() {
					goto l87
				}
				if !_rules[rulee1]() {
					goto l87
				}
				if !_rules[ruleclose]() {
					goto l87
				}
				add(rulesub, position88)
			}
			return true
		l87:
			position, tokenIndex = position87, tokenIndex87
			return false
		},
		/* 19 add <- <('+' sp)> */
		func() bool {
			position89, tokenIndex89 := position, tokenIndex
			{
				position90 := position
				if buffer[position] != rune('+') {
					goto l89
				}
				position++
				if !_rules[rulesp]() {
					goto l89
				}
				add(ruleadd, position90)
			}
			return true
		l89:
			position, tokenIndex = position89, tokenIndex89
			return false
		},
		/* 20 minus <- <('-' sp)> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				if buffer[position] != rune('-') {
					goto l91
				}
				position++
				if !_rules[rulesp]() {
					goto l91
				}
				add(ruleminus, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 21 multiply <- <('*' sp)> */
		func() bool {
			position93, tokenIndex93 := position, tokenIndex
			{
				position94 := position
				if buffer[position] != rune('*') {
					goto l93
				}
				position++
				if !_rules[rulesp]() {
					goto l93
				}
				add(rulemultiply, position94)
			}
			return true
		l93:
			position, tokenIndex = position93, tokenIndex93
			return false
		},
		/* 22 divide <- <('/' sp)> */
		func() bool {
			position95, tokenIndex95 := position, tokenIndex
			{
				position96 := position
				if buffer[position] != rune('/') {
					goto l95
				}
				position++
				if !_rules[rulesp]() {
					goto l95
				}
				add(ruledivide, position96)
			}
			return true
		l95:
			position, tokenIndex = position95, tokenIndex95
			return false
		},
		/* 23 modulus <- <('%' sp)> */
		func() bool {
			position97, tokenIndex97 := position, tokenIndex
			{
				position98 := position
				if buffer[position] != rune('%') {
					goto l97
				}
				position++
				if !_rules[rulesp]() {
					goto l97
				}
				add(rulemodulus, position98)
			}
			return true
		l97:
			position, tokenIndex = position97, tokenIndex97
			return false
		},
		/* 24 exponentiation <- <('^' sp)> */
		func() bool {
			position99, tokenIndex99 := position, tokenIndex
			{
				position100 := position
				if buffer[position] != rune('^') {
					goto l99
				}
				position++
				if !_rules[rulesp]() {
					goto l99
				}
				add(ruleexponentiation, position100)
			}
			return true
		l99:
			position, tokenIndex = position99, tokenIndex99
			return false
		},
		/* 25 open <- <('(' sp)> */
		func() bool {
			position101, tokenIndex101 := position, tokenIndex
			{
				position102 := position
				if buffer[position] != rune('(') {
					goto l101
				}
				position++
				if !_rules[rulesp]() {
					goto l101
				}
				add(ruleopen, position102)
			}
			return true
		l101:
			position, tokenIndex = position101, tokenIndex101
			return false
		},
		/* 26 close <- <(')' sp)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				if buffer[position] != rune(')') {
					goto l103
				}
				position++
				if !_rules[rulesp]() {
					goto l103
				}
				add(ruleclose, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 27 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position106 := position
			l107:
				{
					position108, tokenIndex108 := position, tokenIndex
					{
						position109, tokenIndex109 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l110
						}
						position++
						goto l109
					l110:
						position, tokenIndex = position109, tokenIndex109
						if buffer[position] != rune('\t') {
							goto l108
						}
						position++
					}
				l109:
					goto l107
				l108:
					position, tokenIndex = position108, tokenIndex108
				}
				add(rulesp, position106)
			}
			return true
		},
		/* 28 row <- <(';' sp)> */
		func() bool {
			position111, tokenIndex111 := position, tokenIndex
			{
				position112 := position
				if buffer[position] != rune(';') {
					goto l111
				}
				position++
				if !_rules[rulesp]() {
					goto l111
				}
				add(rulerow, position112)
			}
			return true
		l111:
			position, tokenIndex = position111, tokenIndex111
			return false
		},
		nil,
	}
	p.rules = _rules
	return nil
}
