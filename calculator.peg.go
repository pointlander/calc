package main

// Code generated by peg calculator.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulevalue
	ruleimaginary
	rulenumber
	ruleexp1
	ruleexp2
	rulepi
	ruleprec
	rulelog
	rulesqrt
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulePegText
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"value",
	"imaginary",
	"number",
	"exp1",
	"exp2",
	"pi",
	"prec",
	"log",
	"sqrt",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"PegText",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[34m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Calculator struct {
	Buffer string
	buffer []rune
	rules  [26]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Calculator) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Calculator) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Calculator
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Calculator) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Calculator) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func Pretty(pretty bool) func(*Calculator) error {
	return func(p *Calculator) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Calculator) error {
	return func(p *Calculator) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Calculator) Init(options ...func(*Calculator) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp e1 !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				if !_rules[rulee1]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add e2) / (minus e2))*)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[rulee2]() {
					goto l3
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position7, tokenIndex7 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l8
						}
						if !_rules[rulee2]() {
							goto l8
						}
						goto l7
					l8:
						position, tokenIndex = position7, tokenIndex7
						if !_rules[ruleminus]() {
							goto l6
						}
						if !_rules[rulee2]() {
							goto l6
						}
					}
				l7:
					goto l5
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(rulee1, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 e2 <- <(e3 ((multiply e3) / (divide e3) / (modulus e3))*)> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				if !_rules[rulee3]() {
					goto l9
				}
			l11:
				{
					position12, tokenIndex12 := position, tokenIndex
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulemultiply]() {
							goto l14
						}
						if !_rules[rulee3]() {
							goto l14
						}
						goto l13
					l14:
						position, tokenIndex = position13, tokenIndex13
						if !_rules[ruledivide]() {
							goto l15
						}
						if !_rules[rulee3]() {
							goto l15
						}
						goto l13
					l15:
						position, tokenIndex = position13, tokenIndex13
						if !_rules[rulemodulus]() {
							goto l12
						}
						if !_rules[rulee3]() {
							goto l12
						}
					}
				l13:
					goto l11
				l12:
					position, tokenIndex = position12, tokenIndex12
				}
				add(rulee2, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 3 e3 <- <(e4 (exponentiation e4)*)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				if !_rules[rulee4]() {
					goto l16
				}
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[ruleexponentiation]() {
						goto l19
					}
					if !_rules[rulee4]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
				add(rulee3, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 4 e4 <- <((minus value) / value)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l23
					}
					if !_rules[rulevalue]() {
						goto l23
					}
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					if !_rules[rulevalue]() {
						goto l20
					}
				}
			l22:
				add(rulee4, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 5 value <- <(imaginary / number / exp1 / exp2 / pi / prec / log / sqrt / sub)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[ruleimaginary]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulenumber]() {
						goto l28
					}
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleexp1]() {
						goto l29
					}
					goto l26
				l29:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleexp2]() {
						goto l30
					}
					goto l26
				l30:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulepi]() {
						goto l31
					}
					goto l26
				l31:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleprec]() {
						goto l32
					}
					goto l26
				l32:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulelog]() {
						goto l33
					}
					goto l26
				l33:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesqrt]() {
						goto l34
					}
					goto l26
				l34:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesub]() {
						goto l24
					}
				}
			l26:
				add(rulevalue, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 6 imaginary <- <(<('-'? [0-9]+ ('.' [0-9]*)?)> 'i' sp)> */
		func() bool {
			position35, tokenIndex35 := position, tokenIndex
			{
				position36 := position
				{
					position37 := position
					{
						position38, tokenIndex38 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l38
						}
						position++
						goto l39
					l38:
						position, tokenIndex = position38, tokenIndex38
					}
				l39:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l35
					}
					position++
				l40:
					{
						position41, tokenIndex41 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l41
						}
						position++
						goto l40
					l41:
						position, tokenIndex = position41, tokenIndex41
					}
					{
						position42, tokenIndex42 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l42
						}
						position++
					l44:
						{
							position45, tokenIndex45 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l45
							}
							position++
							goto l44
						l45:
							position, tokenIndex = position45, tokenIndex45
						}
						goto l43
					l42:
						position, tokenIndex = position42, tokenIndex42
					}
				l43:
					add(rulePegText, position37)
				}
				if buffer[position] != rune('i') {
					goto l35
				}
				position++
				if !_rules[rulesp]() {
					goto l35
				}
				add(ruleimaginary, position36)
			}
			return true
		l35:
			position, tokenIndex = position35, tokenIndex35
			return false
		},
		/* 7 number <- <(<('-'? [0-9]+ ('.' [0-9]*)?)> sp)> */
		func() bool {
			position46, tokenIndex46 := position, tokenIndex
			{
				position47 := position
				{
					position48 := position
					{
						position49, tokenIndex49 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l49
						}
						position++
						goto l50
					l49:
						position, tokenIndex = position49, tokenIndex49
					}
				l50:
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l46
					}
					position++
				l51:
					{
						position52, tokenIndex52 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l52
						}
						position++
						goto l51
					l52:
						position, tokenIndex = position52, tokenIndex52
					}
					{
						position53, tokenIndex53 := position, tokenIndex
						if buffer[position] != rune('.') {
							goto l53
						}
						position++
					l55:
						{
							position56, tokenIndex56 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l56
							}
							position++
							goto l55
						l56:
							position, tokenIndex = position56, tokenIndex56
						}
						goto l54
					l53:
						position, tokenIndex = position53, tokenIndex53
					}
				l54:
					add(rulePegText, position48)
				}
				if !_rules[rulesp]() {
					goto l46
				}
				add(rulenumber, position47)
			}
			return true
		l46:
			position, tokenIndex = position46, tokenIndex46
			return false
		},
		/* 8 exp1 <- <('e' 'x' 'p' open e1 close)> */
		func() bool {
			position57, tokenIndex57 := position, tokenIndex
			{
				position58 := position
				if buffer[position] != rune('e') {
					goto l57
				}
				position++
				if buffer[position] != rune('x') {
					goto l57
				}
				position++
				if buffer[position] != rune('p') {
					goto l57
				}
				position++
				if !_rules[ruleopen]() {
					goto l57
				}
				if !_rules[rulee1]() {
					goto l57
				}
				if !_rules[ruleclose]() {
					goto l57
				}
				add(ruleexp1, position58)
			}
			return true
		l57:
			position, tokenIndex = position57, tokenIndex57
			return false
		},
		/* 9 exp2 <- <('e' '^' value)> */
		func() bool {
			position59, tokenIndex59 := position, tokenIndex
			{
				position60 := position
				if buffer[position] != rune('e') {
					goto l59
				}
				position++
				if buffer[position] != rune('^') {
					goto l59
				}
				position++
				if !_rules[rulevalue]() {
					goto l59
				}
				add(ruleexp2, position60)
			}
			return true
		l59:
			position, tokenIndex = position59, tokenIndex59
			return false
		},
		/* 10 pi <- <('p' 'i' sp)> */
		func() bool {
			position61, tokenIndex61 := position, tokenIndex
			{
				position62 := position
				if buffer[position] != rune('p') {
					goto l61
				}
				position++
				if buffer[position] != rune('i') {
					goto l61
				}
				position++
				if !_rules[rulesp]() {
					goto l61
				}
				add(rulepi, position62)
			}
			return true
		l61:
			position, tokenIndex = position61, tokenIndex61
			return false
		},
		/* 11 prec <- <('p' 'r' 'e' 'c' open e1 close)> */
		func() bool {
			position63, tokenIndex63 := position, tokenIndex
			{
				position64 := position
				if buffer[position] != rune('p') {
					goto l63
				}
				position++
				if buffer[position] != rune('r') {
					goto l63
				}
				position++
				if buffer[position] != rune('e') {
					goto l63
				}
				position++
				if buffer[position] != rune('c') {
					goto l63
				}
				position++
				if !_rules[ruleopen]() {
					goto l63
				}
				if !_rules[rulee1]() {
					goto l63
				}
				if !_rules[ruleclose]() {
					goto l63
				}
				add(ruleprec, position64)
			}
			return true
		l63:
			position, tokenIndex = position63, tokenIndex63
			return false
		},
		/* 12 log <- <('l' 'o' 'g' open e1 close)> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				if buffer[position] != rune('l') {
					goto l65
				}
				position++
				if buffer[position] != rune('o') {
					goto l65
				}
				position++
				if buffer[position] != rune('g') {
					goto l65
				}
				position++
				if !_rules[ruleopen]() {
					goto l65
				}
				if !_rules[rulee1]() {
					goto l65
				}
				if !_rules[ruleclose]() {
					goto l65
				}
				add(rulelog, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 13 sqrt <- <('s' 'q' 'r' 't' open e1 close)> */
		func() bool {
			position67, tokenIndex67 := position, tokenIndex
			{
				position68 := position
				if buffer[position] != rune('s') {
					goto l67
				}
				position++
				if buffer[position] != rune('q') {
					goto l67
				}
				position++
				if buffer[position] != rune('r') {
					goto l67
				}
				position++
				if buffer[position] != rune('t') {
					goto l67
				}
				position++
				if !_rules[ruleopen]() {
					goto l67
				}
				if !_rules[rulee1]() {
					goto l67
				}
				if !_rules[ruleclose]() {
					goto l67
				}
				add(rulesqrt, position68)
			}
			return true
		l67:
			position, tokenIndex = position67, tokenIndex67
			return false
		},
		/* 14 sub <- <(open e1 close)> */
		func() bool {
			position69, tokenIndex69 := position, tokenIndex
			{
				position70 := position
				if !_rules[ruleopen]() {
					goto l69
				}
				if !_rules[rulee1]() {
					goto l69
				}
				if !_rules[ruleclose]() {
					goto l69
				}
				add(rulesub, position70)
			}
			return true
		l69:
			position, tokenIndex = position69, tokenIndex69
			return false
		},
		/* 15 add <- <('+' sp)> */
		func() bool {
			position71, tokenIndex71 := position, tokenIndex
			{
				position72 := position
				if buffer[position] != rune('+') {
					goto l71
				}
				position++
				if !_rules[rulesp]() {
					goto l71
				}
				add(ruleadd, position72)
			}
			return true
		l71:
			position, tokenIndex = position71, tokenIndex71
			return false
		},
		/* 16 minus <- <('-' sp)> */
		func() bool {
			position73, tokenIndex73 := position, tokenIndex
			{
				position74 := position
				if buffer[position] != rune('-') {
					goto l73
				}
				position++
				if !_rules[rulesp]() {
					goto l73
				}
				add(ruleminus, position74)
			}
			return true
		l73:
			position, tokenIndex = position73, tokenIndex73
			return false
		},
		/* 17 multiply <- <('*' sp)> */
		func() bool {
			position75, tokenIndex75 := position, tokenIndex
			{
				position76 := position
				if buffer[position] != rune('*') {
					goto l75
				}
				position++
				if !_rules[rulesp]() {
					goto l75
				}
				add(rulemultiply, position76)
			}
			return true
		l75:
			position, tokenIndex = position75, tokenIndex75
			return false
		},
		/* 18 divide <- <('/' sp)> */
		func() bool {
			position77, tokenIndex77 := position, tokenIndex
			{
				position78 := position
				if buffer[position] != rune('/') {
					goto l77
				}
				position++
				if !_rules[rulesp]() {
					goto l77
				}
				add(ruledivide, position78)
			}
			return true
		l77:
			position, tokenIndex = position77, tokenIndex77
			return false
		},
		/* 19 modulus <- <('%' sp)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if buffer[position] != rune('%') {
					goto l79
				}
				position++
				if !_rules[rulesp]() {
					goto l79
				}
				add(rulemodulus, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 20 exponentiation <- <('^' sp)> */
		func() bool {
			position81, tokenIndex81 := position, tokenIndex
			{
				position82 := position
				if buffer[position] != rune('^') {
					goto l81
				}
				position++
				if !_rules[rulesp]() {
					goto l81
				}
				add(ruleexponentiation, position82)
			}
			return true
		l81:
			position, tokenIndex = position81, tokenIndex81
			return false
		},
		/* 21 open <- <('(' sp)> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				if buffer[position] != rune('(') {
					goto l83
				}
				position++
				if !_rules[rulesp]() {
					goto l83
				}
				add(ruleopen, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 22 close <- <(')' sp)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				if buffer[position] != rune(')') {
					goto l85
				}
				position++
				if !_rules[rulesp]() {
					goto l85
				}
				add(ruleclose, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 23 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position88 := position
			l89:
				{
					position90, tokenIndex90 := position, tokenIndex
					{
						position91, tokenIndex91 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l92
						}
						position++
						goto l91
					l92:
						position, tokenIndex = position91, tokenIndex91
						if buffer[position] != rune('\t') {
							goto l90
						}
						position++
					}
				l91:
					goto l89
				l90:
					position, tokenIndex = position90, tokenIndex90
				}
				add(rulesp, position88)
			}
			return true
		},
		nil,
	}
	p.rules = _rules
	return nil
}
