package calc

// Code generated by peg calculator.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	rulee
	rulee1
	rulee2
	rulee3
	rulee4
	rulevalue
	rulevariable
	rulematrix
	ruleimaginary
	rulenumber
	ruledecimal
	rulenotation
	ruleexp1
	ruleexp2
	rulenatural
	rulepi
	ruleprec
	rulesimplify
	rulederivative
	ruleintegrate
	rulelog
	rulesqrt
	rulecos
	rulesin
	ruletan
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulesp
	rulerow
)

var rul3s = [...]string{
	"Unknown",
	"e",
	"e1",
	"e2",
	"e3",
	"e4",
	"value",
	"variable",
	"matrix",
	"imaginary",
	"number",
	"decimal",
	"notation",
	"exp1",
	"exp2",
	"natural",
	"pi",
	"prec",
	"simplify",
	"derivative",
	"integrate",
	"log",
	"sqrt",
	"cos",
	"sin",
	"tan",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"sp",
	"row",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type Calculator struct {
	Buffer string
	buffer []rune
	rules  [37]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *Calculator) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *Calculator) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *Calculator
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *Calculator) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *Calculator) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *Calculator) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func Pretty(pretty bool) func(*Calculator) error {
	return func(p *Calculator) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*Calculator) error {
	return func(p *Calculator) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *Calculator) Init(options ...func(*Calculator) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 e <- <(sp e1 !.)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulesp]() {
					goto l0
				}
				if !_rules[rulee1]() {
					goto l0
				}
				{
					position2, tokenIndex2 := position, tokenIndex
					if !matchDot() {
						goto l2
					}
					goto l0
				l2:
					position, tokenIndex = position2, tokenIndex2
				}
				add(rulee, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e1 <- <(e2 ((add e2) / (minus e2))*)> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				if !_rules[rulee2]() {
					goto l3
				}
			l5:
				{
					position6, tokenIndex6 := position, tokenIndex
					{
						position7, tokenIndex7 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l8
						}
						if !_rules[rulee2]() {
							goto l8
						}
						goto l7
					l8:
						position, tokenIndex = position7, tokenIndex7
						if !_rules[ruleminus]() {
							goto l6
						}
						if !_rules[rulee2]() {
							goto l6
						}
					}
				l7:
					goto l5
				l6:
					position, tokenIndex = position6, tokenIndex6
				}
				add(rulee1, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 e2 <- <(e3 ((multiply e3) / (divide e3) / (modulus e3))*)> */
		func() bool {
			position9, tokenIndex9 := position, tokenIndex
			{
				position10 := position
				if !_rules[rulee3]() {
					goto l9
				}
			l11:
				{
					position12, tokenIndex12 := position, tokenIndex
					{
						position13, tokenIndex13 := position, tokenIndex
						if !_rules[rulemultiply]() {
							goto l14
						}
						if !_rules[rulee3]() {
							goto l14
						}
						goto l13
					l14:
						position, tokenIndex = position13, tokenIndex13
						if !_rules[ruledivide]() {
							goto l15
						}
						if !_rules[rulee3]() {
							goto l15
						}
						goto l13
					l15:
						position, tokenIndex = position13, tokenIndex13
						if !_rules[rulemodulus]() {
							goto l12
						}
						if !_rules[rulee3]() {
							goto l12
						}
					}
				l13:
					goto l11
				l12:
					position, tokenIndex = position12, tokenIndex12
				}
				add(rulee2, position10)
			}
			return true
		l9:
			position, tokenIndex = position9, tokenIndex9
			return false
		},
		/* 3 e3 <- <(e4 (exponentiation e4)*)> */
		func() bool {
			position16, tokenIndex16 := position, tokenIndex
			{
				position17 := position
				if !_rules[rulee4]() {
					goto l16
				}
			l18:
				{
					position19, tokenIndex19 := position, tokenIndex
					if !_rules[ruleexponentiation]() {
						goto l19
					}
					if !_rules[rulee4]() {
						goto l19
					}
					goto l18
				l19:
					position, tokenIndex = position19, tokenIndex19
				}
				add(rulee3, position17)
			}
			return true
		l16:
			position, tokenIndex = position16, tokenIndex16
			return false
		},
		/* 4 e4 <- <((minus value) / value)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l23
					}
					if !_rules[rulevalue]() {
						goto l23
					}
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					if !_rules[rulevalue]() {
						goto l20
					}
				}
			l22:
				add(rulee4, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 5 value <- <(matrix / imaginary / number / exp1 / exp2 / natural / pi / prec / simplify / derivative / integrate / log / sqrt / cos / sin / tan / variable / sub)> */
		func() bool {
			position24, tokenIndex24 := position, tokenIndex
			{
				position25 := position
				{
					position26, tokenIndex26 := position, tokenIndex
					if !_rules[rulematrix]() {
						goto l27
					}
					goto l26
				l27:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleimaginary]() {
						goto l28
					}
					goto l26
				l28:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulenumber]() {
						goto l29
					}
					goto l26
				l29:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleexp1]() {
						goto l30
					}
					goto l26
				l30:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleexp2]() {
						goto l31
					}
					goto l26
				l31:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulenatural]() {
						goto l32
					}
					goto l26
				l32:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulepi]() {
						goto l33
					}
					goto l26
				l33:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleprec]() {
						goto l34
					}
					goto l26
				l34:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesimplify]() {
						goto l35
					}
					goto l26
				l35:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulederivative]() {
						goto l36
					}
					goto l26
				l36:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruleintegrate]() {
						goto l37
					}
					goto l26
				l37:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulelog]() {
						goto l38
					}
					goto l26
				l38:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesqrt]() {
						goto l39
					}
					goto l26
				l39:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulecos]() {
						goto l40
					}
					goto l26
				l40:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesin]() {
						goto l41
					}
					goto l26
				l41:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[ruletan]() {
						goto l42
					}
					goto l26
				l42:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulevariable]() {
						goto l43
					}
					goto l26
				l43:
					position, tokenIndex = position26, tokenIndex26
					if !_rules[rulesub]() {
						goto l24
					}
				}
			l26:
				add(rulevalue, position25)
			}
			return true
		l24:
			position, tokenIndex = position24, tokenIndex24
			return false
		},
		/* 6 variable <- <(([A-Z] / [a-z])+ sp)> */
		func() bool {
			position44, tokenIndex44 := position, tokenIndex
			{
				position45 := position
				{
					position48, tokenIndex48 := position, tokenIndex
					if c := buffer[position]; c < rune('A') || c > rune('Z') {
						goto l49
					}
					position++
					goto l48
				l49:
					position, tokenIndex = position48, tokenIndex48
					if c := buffer[position]; c < rune('a') || c > rune('z') {
						goto l44
					}
					position++
				}
			l48:
			l46:
				{
					position47, tokenIndex47 := position, tokenIndex
					{
						position50, tokenIndex50 := position, tokenIndex
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l51
						}
						position++
						goto l50
					l51:
						position, tokenIndex = position50, tokenIndex50
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l47
						}
						position++
					}
				l50:
					goto l46
				l47:
					position, tokenIndex = position47, tokenIndex47
				}
				if !_rules[rulesp]() {
					goto l44
				}
				add(rulevariable, position45)
			}
			return true
		l44:
			position, tokenIndex = position44, tokenIndex44
			return false
		},
		/* 7 matrix <- <('[' sp (e1 / row)+ ']' sp)> */
		func() bool {
			position52, tokenIndex52 := position, tokenIndex
			{
				position53 := position
				if buffer[position] != rune('[') {
					goto l52
				}
				position++
				if !_rules[rulesp]() {
					goto l52
				}
				{
					position56, tokenIndex56 := position, tokenIndex
					if !_rules[rulee1]() {
						goto l57
					}
					goto l56
				l57:
					position, tokenIndex = position56, tokenIndex56
					if !_rules[rulerow]() {
						goto l52
					}
				}
			l56:
			l54:
				{
					position55, tokenIndex55 := position, tokenIndex
					{
						position58, tokenIndex58 := position, tokenIndex
						if !_rules[rulee1]() {
							goto l59
						}
						goto l58
					l59:
						position, tokenIndex = position58, tokenIndex58
						if !_rules[rulerow]() {
							goto l55
						}
					}
				l58:
					goto l54
				l55:
					position, tokenIndex = position55, tokenIndex55
				}
				if buffer[position] != rune(']') {
					goto l52
				}
				position++
				if !_rules[rulesp]() {
					goto l52
				}
				add(rulematrix, position53)
			}
			return true
		l52:
			position, tokenIndex = position52, tokenIndex52
			return false
		},
		/* 8 imaginary <- <(decimal notation? 'i' sp)> */
		func() bool {
			position60, tokenIndex60 := position, tokenIndex
			{
				position61 := position
				if !_rules[ruledecimal]() {
					goto l60
				}
				{
					position62, tokenIndex62 := position, tokenIndex
					if !_rules[rulenotation]() {
						goto l62
					}
					goto l63
				l62:
					position, tokenIndex = position62, tokenIndex62
				}
			l63:
				if buffer[position] != rune('i') {
					goto l60
				}
				position++
				if !_rules[rulesp]() {
					goto l60
				}
				add(ruleimaginary, position61)
			}
			return true
		l60:
			position, tokenIndex = position60, tokenIndex60
			return false
		},
		/* 9 number <- <(decimal notation? sp)> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if !_rules[ruledecimal]() {
					goto l64
				}
				{
					position66, tokenIndex66 := position, tokenIndex
					if !_rules[rulenotation]() {
						goto l66
					}
					goto l67
				l66:
					position, tokenIndex = position66, tokenIndex66
				}
			l67:
				if !_rules[rulesp]() {
					goto l64
				}
				add(rulenumber, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 10 decimal <- <(('-' / '+')? [0-9]+ ('.' [0-9]*)?)> */
		func() bool {
			position68, tokenIndex68 := position, tokenIndex
			{
				position69 := position
				{
					position70, tokenIndex70 := position, tokenIndex
					{
						position72, tokenIndex72 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l73
						}
						position++
						goto l72
					l73:
						position, tokenIndex = position72, tokenIndex72
						if buffer[position] != rune('+') {
							goto l70
						}
						position++
					}
				l72:
					goto l71
				l70:
					position, tokenIndex = position70, tokenIndex70
				}
			l71:
				if c := buffer[position]; c < rune('0') || c > rune('9') {
					goto l68
				}
				position++
			l74:
				{
					position75, tokenIndex75 := position, tokenIndex
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l75
					}
					position++
					goto l74
				l75:
					position, tokenIndex = position75, tokenIndex75
				}
				{
					position76, tokenIndex76 := position, tokenIndex
					if buffer[position] != rune('.') {
						goto l76
					}
					position++
				l78:
					{
						position79, tokenIndex79 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l79
						}
						position++
						goto l78
					l79:
						position, tokenIndex = position79, tokenIndex79
					}
					goto l77
				l76:
					position, tokenIndex = position76, tokenIndex76
				}
			l77:
				add(ruledecimal, position69)
			}
			return true
		l68:
			position, tokenIndex = position68, tokenIndex68
			return false
		},
		/* 11 notation <- <(('e' / 'E') decimal)> */
		func() bool {
			position80, tokenIndex80 := position, tokenIndex
			{
				position81 := position
				{
					position82, tokenIndex82 := position, tokenIndex
					if buffer[position] != rune('e') {
						goto l83
					}
					position++
					goto l82
				l83:
					position, tokenIndex = position82, tokenIndex82
					if buffer[position] != rune('E') {
						goto l80
					}
					position++
				}
			l82:
				if !_rules[ruledecimal]() {
					goto l80
				}
				add(rulenotation, position81)
			}
			return true
		l80:
			position, tokenIndex = position80, tokenIndex80
			return false
		},
		/* 12 exp1 <- <('e' 'x' 'p' open e1 close)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if buffer[position] != rune('e') {
					goto l84
				}
				position++
				if buffer[position] != rune('x') {
					goto l84
				}
				position++
				if buffer[position] != rune('p') {
					goto l84
				}
				position++
				if !_rules[ruleopen]() {
					goto l84
				}
				if !_rules[rulee1]() {
					goto l84
				}
				if !_rules[ruleclose]() {
					goto l84
				}
				add(ruleexp1, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 13 exp2 <- <('e' '^' value)> */
		func() bool {
			position86, tokenIndex86 := position, tokenIndex
			{
				position87 := position
				if buffer[position] != rune('e') {
					goto l86
				}
				position++
				if buffer[position] != rune('^') {
					goto l86
				}
				position++
				if !_rules[rulevalue]() {
					goto l86
				}
				add(ruleexp2, position87)
			}
			return true
		l86:
			position, tokenIndex = position86, tokenIndex86
			return false
		},
		/* 14 natural <- <('e' sp)> */
		func() bool {
			position88, tokenIndex88 := position, tokenIndex
			{
				position89 := position
				if buffer[position] != rune('e') {
					goto l88
				}
				position++
				if !_rules[rulesp]() {
					goto l88
				}
				add(rulenatural, position89)
			}
			return true
		l88:
			position, tokenIndex = position88, tokenIndex88
			return false
		},
		/* 15 pi <- <('p' 'i' sp)> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
				if buffer[position] != rune('p') {
					goto l90
				}
				position++
				if buffer[position] != rune('i') {
					goto l90
				}
				position++
				if !_rules[rulesp]() {
					goto l90
				}
				add(rulepi, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 16 prec <- <('p' 'r' 'e' 'c' open e1 close)> */
		func() bool {
			position92, tokenIndex92 := position, tokenIndex
			{
				position93 := position
				if buffer[position] != rune('p') {
					goto l92
				}
				position++
				if buffer[position] != rune('r') {
					goto l92
				}
				position++
				if buffer[position] != rune('e') {
					goto l92
				}
				position++
				if buffer[position] != rune('c') {
					goto l92
				}
				position++
				if !_rules[ruleopen]() {
					goto l92
				}
				if !_rules[rulee1]() {
					goto l92
				}
				if !_rules[ruleclose]() {
					goto l92
				}
				add(ruleprec, position93)
			}
			return true
		l92:
			position, tokenIndex = position92, tokenIndex92
			return false
		},
		/* 17 simplify <- <('s' 'i' 'm' 'p' 'l' 'i' 'f' 'y' open e1 close)> */
		func() bool {
			position94, tokenIndex94 := position, tokenIndex
			{
				position95 := position
				if buffer[position] != rune('s') {
					goto l94
				}
				position++
				if buffer[position] != rune('i') {
					goto l94
				}
				position++
				if buffer[position] != rune('m') {
					goto l94
				}
				position++
				if buffer[position] != rune('p') {
					goto l94
				}
				position++
				if buffer[position] != rune('l') {
					goto l94
				}
				position++
				if buffer[position] != rune('i') {
					goto l94
				}
				position++
				if buffer[position] != rune('f') {
					goto l94
				}
				position++
				if buffer[position] != rune('y') {
					goto l94
				}
				position++
				if !_rules[ruleopen]() {
					goto l94
				}
				if !_rules[rulee1]() {
					goto l94
				}
				if !_rules[ruleclose]() {
					goto l94
				}
				add(rulesimplify, position95)
			}
			return true
		l94:
			position, tokenIndex = position94, tokenIndex94
			return false
		},
		/* 18 derivative <- <('d' 'e' 'r' 'i' 'v' 'a' 't' 'i' 'v' 'e' open e1 close)> */
		func() bool {
			position96, tokenIndex96 := position, tokenIndex
			{
				position97 := position
				if buffer[position] != rune('d') {
					goto l96
				}
				position++
				if buffer[position] != rune('e') {
					goto l96
				}
				position++
				if buffer[position] != rune('r') {
					goto l96
				}
				position++
				if buffer[position] != rune('i') {
					goto l96
				}
				position++
				if buffer[position] != rune('v') {
					goto l96
				}
				position++
				if buffer[position] != rune('a') {
					goto l96
				}
				position++
				if buffer[position] != rune('t') {
					goto l96
				}
				position++
				if buffer[position] != rune('i') {
					goto l96
				}
				position++
				if buffer[position] != rune('v') {
					goto l96
				}
				position++
				if buffer[position] != rune('e') {
					goto l96
				}
				position++
				if !_rules[ruleopen]() {
					goto l96
				}
				if !_rules[rulee1]() {
					goto l96
				}
				if !_rules[ruleclose]() {
					goto l96
				}
				add(rulederivative, position97)
			}
			return true
		l96:
			position, tokenIndex = position96, tokenIndex96
			return false
		},
		/* 19 integrate <- <('i' 'n' 't' 'e' 'g' 'r' 'a' 't' 'e' open e1 close)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if buffer[position] != rune('i') {
					goto l98
				}
				position++
				if buffer[position] != rune('n') {
					goto l98
				}
				position++
				if buffer[position] != rune('t') {
					goto l98
				}
				position++
				if buffer[position] != rune('e') {
					goto l98
				}
				position++
				if buffer[position] != rune('g') {
					goto l98
				}
				position++
				if buffer[position] != rune('r') {
					goto l98
				}
				position++
				if buffer[position] != rune('a') {
					goto l98
				}
				position++
				if buffer[position] != rune('t') {
					goto l98
				}
				position++
				if buffer[position] != rune('e') {
					goto l98
				}
				position++
				if !_rules[ruleopen]() {
					goto l98
				}
				if !_rules[rulee1]() {
					goto l98
				}
				if !_rules[ruleclose]() {
					goto l98
				}
				add(ruleintegrate, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 20 log <- <('l' 'o' 'g' open e1 close)> */
		func() bool {
			position100, tokenIndex100 := position, tokenIndex
			{
				position101 := position
				if buffer[position] != rune('l') {
					goto l100
				}
				position++
				if buffer[position] != rune('o') {
					goto l100
				}
				position++
				if buffer[position] != rune('g') {
					goto l100
				}
				position++
				if !_rules[ruleopen]() {
					goto l100
				}
				if !_rules[rulee1]() {
					goto l100
				}
				if !_rules[ruleclose]() {
					goto l100
				}
				add(rulelog, position101)
			}
			return true
		l100:
			position, tokenIndex = position100, tokenIndex100
			return false
		},
		/* 21 sqrt <- <('s' 'q' 'r' 't' open e1 close)> */
		func() bool {
			position102, tokenIndex102 := position, tokenIndex
			{
				position103 := position
				if buffer[position] != rune('s') {
					goto l102
				}
				position++
				if buffer[position] != rune('q') {
					goto l102
				}
				position++
				if buffer[position] != rune('r') {
					goto l102
				}
				position++
				if buffer[position] != rune('t') {
					goto l102
				}
				position++
				if !_rules[ruleopen]() {
					goto l102
				}
				if !_rules[rulee1]() {
					goto l102
				}
				if !_rules[ruleclose]() {
					goto l102
				}
				add(rulesqrt, position103)
			}
			return true
		l102:
			position, tokenIndex = position102, tokenIndex102
			return false
		},
		/* 22 cos <- <('c' 'o' 's' open e1 close)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				if buffer[position] != rune('c') {
					goto l104
				}
				position++
				if buffer[position] != rune('o') {
					goto l104
				}
				position++
				if buffer[position] != rune('s') {
					goto l104
				}
				position++
				if !_rules[ruleopen]() {
					goto l104
				}
				if !_rules[rulee1]() {
					goto l104
				}
				if !_rules[ruleclose]() {
					goto l104
				}
				add(rulecos, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 23 sin <- <('s' 'i' 'n' open e1 close)> */
		func() bool {
			position106, tokenIndex106 := position, tokenIndex
			{
				position107 := position
				if buffer[position] != rune('s') {
					goto l106
				}
				position++
				if buffer[position] != rune('i') {
					goto l106
				}
				position++
				if buffer[position] != rune('n') {
					goto l106
				}
				position++
				if !_rules[ruleopen]() {
					goto l106
				}
				if !_rules[rulee1]() {
					goto l106
				}
				if !_rules[ruleclose]() {
					goto l106
				}
				add(rulesin, position107)
			}
			return true
		l106:
			position, tokenIndex = position106, tokenIndex106
			return false
		},
		/* 24 tan <- <('t' 'a' 'n' open e1 close)> */
		func() bool {
			position108, tokenIndex108 := position, tokenIndex
			{
				position109 := position
				if buffer[position] != rune('t') {
					goto l108
				}
				position++
				if buffer[position] != rune('a') {
					goto l108
				}
				position++
				if buffer[position] != rune('n') {
					goto l108
				}
				position++
				if !_rules[ruleopen]() {
					goto l108
				}
				if !_rules[rulee1]() {
					goto l108
				}
				if !_rules[ruleclose]() {
					goto l108
				}
				add(ruletan, position109)
			}
			return true
		l108:
			position, tokenIndex = position108, tokenIndex108
			return false
		},
		/* 25 sub <- <(open e1 close)> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				if !_rules[ruleopen]() {
					goto l110
				}
				if !_rules[rulee1]() {
					goto l110
				}
				if !_rules[ruleclose]() {
					goto l110
				}
				add(rulesub, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 26 add <- <('+' sp)> */
		func() bool {
			position112, tokenIndex112 := position, tokenIndex
			{
				position113 := position
				if buffer[position] != rune('+') {
					goto l112
				}
				position++
				if !_rules[rulesp]() {
					goto l112
				}
				add(ruleadd, position113)
			}
			return true
		l112:
			position, tokenIndex = position112, tokenIndex112
			return false
		},
		/* 27 minus <- <('-' sp)> */
		func() bool {
			position114, tokenIndex114 := position, tokenIndex
			{
				position115 := position
				if buffer[position] != rune('-') {
					goto l114
				}
				position++
				if !_rules[rulesp]() {
					goto l114
				}
				add(ruleminus, position115)
			}
			return true
		l114:
			position, tokenIndex = position114, tokenIndex114
			return false
		},
		/* 28 multiply <- <('*' sp)> */
		func() bool {
			position116, tokenIndex116 := position, tokenIndex
			{
				position117 := position
				if buffer[position] != rune('*') {
					goto l116
				}
				position++
				if !_rules[rulesp]() {
					goto l116
				}
				add(rulemultiply, position117)
			}
			return true
		l116:
			position, tokenIndex = position116, tokenIndex116
			return false
		},
		/* 29 divide <- <('/' sp)> */
		func() bool {
			position118, tokenIndex118 := position, tokenIndex
			{
				position119 := position
				if buffer[position] != rune('/') {
					goto l118
				}
				position++
				if !_rules[rulesp]() {
					goto l118
				}
				add(ruledivide, position119)
			}
			return true
		l118:
			position, tokenIndex = position118, tokenIndex118
			return false
		},
		/* 30 modulus <- <('%' sp)> */
		func() bool {
			position120, tokenIndex120 := position, tokenIndex
			{
				position121 := position
				if buffer[position] != rune('%') {
					goto l120
				}
				position++
				if !_rules[rulesp]() {
					goto l120
				}
				add(rulemodulus, position121)
			}
			return true
		l120:
			position, tokenIndex = position120, tokenIndex120
			return false
		},
		/* 31 exponentiation <- <('^' sp)> */
		func() bool {
			position122, tokenIndex122 := position, tokenIndex
			{
				position123 := position
				if buffer[position] != rune('^') {
					goto l122
				}
				position++
				if !_rules[rulesp]() {
					goto l122
				}
				add(ruleexponentiation, position123)
			}
			return true
		l122:
			position, tokenIndex = position122, tokenIndex122
			return false
		},
		/* 32 open <- <('(' sp)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if buffer[position] != rune('(') {
					goto l124
				}
				position++
				if !_rules[rulesp]() {
					goto l124
				}
				add(ruleopen, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 33 close <- <(')' sp)> */
		func() bool {
			position126, tokenIndex126 := position, tokenIndex
			{
				position127 := position
				if buffer[position] != rune(')') {
					goto l126
				}
				position++
				if !_rules[rulesp]() {
					goto l126
				}
				add(ruleclose, position127)
			}
			return true
		l126:
			position, tokenIndex = position126, tokenIndex126
			return false
		},
		/* 34 sp <- <(' ' / '\t')*> */
		func() bool {
			{
				position129 := position
			l130:
				{
					position131, tokenIndex131 := position, tokenIndex
					{
						position132, tokenIndex132 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l133
						}
						position++
						goto l132
					l133:
						position, tokenIndex = position132, tokenIndex132
						if buffer[position] != rune('\t') {
							goto l131
						}
						position++
					}
				l132:
					goto l130
				l131:
					position, tokenIndex = position131, tokenIndex131
				}
				add(rulesp, position129)
			}
			return true
		},
		/* 35 row <- <(';' sp)> */
		func() bool {
			position134, tokenIndex134 := position, tokenIndex
			{
				position135 := position
				if buffer[position] != rune(';') {
					goto l134
				}
				position++
				if !_rules[rulesp]() {
					goto l134
				}
				add(rulerow, position135)
			}
			return true
		l134:
			position, tokenIndex = position134, tokenIndex134
			return false
		},
	}
	p.rules = _rules
	return nil
}
